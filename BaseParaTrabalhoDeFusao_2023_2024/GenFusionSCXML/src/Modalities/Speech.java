/* 
  *   Speech.java generated by speechmod 
 */   

package Modalities; 

import scxmlgen.interfaces.IModality; 

public enum Speech implements IModality{  

	/* 
	CHANGE_COLOR_AZUL("[SPEECH][CHANGE_COLOR][AZUL]",1500),
	CHANGE_COLOR_VERDE("[SPEECH][CHANGE_COLOR][VERDE]",1500),
	CHANGE_COLOR_CINZENTO("[SPEECH][CHANGE_COLOR][CINZENTO]",1500),
	CHANGE_COLOR_VERMELHO("[SPEECH][CHANGE_COLOR][VERMELHO]",1500),
	CHANGE_COLOR_BRANCO("[SPEECH][CHANGE_COLOR][BRANC]",1500),
	CHANGE_COLOR_ROSA("[SPEECH][CHANGE_COLOR][ROSA]",1500),
	CHANGE_COLOR_AMARELO("[SPEECH][CHANGE_COLOR][AMARELO]",1500),
	CHANGE_COLOR_PRETO("[SPEECH][CHANGE_COLOR][PRETO]",1500),
	CHANGE_COLOR_LARANJA("[SPEECH][CHANGE_COLOR][LARANJA]",1500),
	*/

	// ------------------------Complementary------------------------
	ESCREVER_CONTEUDO("[SPEECH][ESCREVER_CONTEUDO]",5000),
	// SELECIONAR_CELULAS("[SPEECH][SELECIONAR_CELULAS]",5000),

	//----------------------------Single----------------------------
	ALTERAR_TAMANHO_TEXTO("[SPEECH][ALTERAR_TAMANHO_TEXTO]",3000),
	
	
	//---------------------------Reduntante--------------------------
	// COLAR("[SPEECH][COLAR]",5000),
	APAGAR("[SPEECH][APAGAR]",5000),
	// LIMPAR("[SPEECH][LIMPAR]", 5000),
	;


private String event; 
private int timeout;
Speech(String m, int time) {
	event=m;
	timeout=time;
}
@Override
public int getTimeOut(){
	return timeout;
}
@Override
public String getEventName(){
	return event;
}
@Override
public String getEvName(){
	return getModalityName().toLowerCase() +event.toLowerCase();
}

}
